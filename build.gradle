plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    implementation 'software.amazon.awssdk:s3:2.25.0'
    implementation 'org.slf4j:slf4j-simple:2.0.13'
}

javafx {
    version = "17.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    mainClass = 'com.nicholasburczyk.packupdater.Main'
}

shadowJar {
    archiveBaseName = 'packupdater'
    archiveClassifier = ''
    mergeServiceFiles()
}

task createWindowsExe {
    dependsOn shadowJar
    group = 'distribution'
    description = 'Creates Windows installer using jpackage'

    doLast {
        def jarFile = shadowJar.archiveFile.get().asFile
        def outputDir = file("${buildDir}/installers")
        outputDir.mkdirs()

        exec {
            commandLine 'jpackage',
                    '--input', jarFile.parent,
                    '--main-jar', jarFile.name,
                    '--main-class', application.mainClass.get(),
                    '--name', 'PackUpdater',
                    '--app-version', version,
                    '--dest', outputDir.absolutePath,
                    '--type', 'exe',
                    '--win-dir-chooser',
                    '--win-shortcut',
                    '--win-menu',
                    '--runtime-image', System.getProperty('java.home'),
                    '--java-options', '-Djava.awt.headless=false',
                    '--java-options', '--add-modules=javafx.controls,javafx.fxml',
                    '--verbose'
        }
    }
}

task createMacDmg {
    dependsOn shadowJar
    group = 'distribution'
    description = 'Creates Mac DMG using jpackage'

    doLast {
        def jarFile = shadowJar.archiveFile.get().asFile
        def outputDir = file("${buildDir}/installers")
        outputDir.mkdirs()

        exec {
            commandLine 'jpackage',
                    '--input', jarFile.parent,
                    '--main-jar', jarFile.name,
                    '--main-class', application.mainClass.get(),
                    '--name', 'PackUpdater',
                    '--app-version', version,
                    '--dest', outputDir.absolutePath,
                    '--type', 'dmg',
                    '--verbose'
        }
    }
}

task createLaunchers {
    dependsOn shadowJar
    group = 'distribution'
    description = 'Creates simple launcher scripts'

    doLast {
        def jarFile = shadowJar.archiveFile.get().asFile
        def launchersDir = file("${buildDir}/launchers")
        launchersDir.mkdirs()

        copy {
            from jarFile
            into launchersDir
        }

        def batFile = file("${launchersDir}/PackUpdater.bat")
        batFile.text = """@echo off
cd /d "%~dp0"
java -jar ${jarFile.name}
pause
"""

        def shFile = file("${launchersDir}/PackUpdater.sh")
        shFile.text = """#!/bin/bash
cd "\$(dirname "\$0")"
java -jar ${jarFile.name}
"""
        shFile.setExecutable(true)

        println "Launchers created in: ${launchersDir}"
    }
}